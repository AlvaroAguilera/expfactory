version: 2.1

orbs:
  # https://circleci.com/orbs/registry/orb/circleci/docker-publish
  docker-publish: circleci/docker-publish@0.1.3

workflows:
  test:
    jobs:
      - test-python-3:
          filters:
            branches:
              ignore: 
                - master
      - test-python-2:
          filters:
            branches:
              ignore:
                - master

  # This workflow will be run on all branches but master (to test)
  build_without_publishing_job:
    jobs:

      - docker-publish/publish:
          image: vanessa/expfactory-builder
          dockerfile: expfactory/templates/build/docker/builder-base/Dockerfile
          deploy: false
          tag: base
          filters:
            branches:
              ignore: 
                - master
          after_build:
            - run:
                name: Preview Docker Tag for Build
                command: |
                   for string in $(cat expfactory/version.py | grep __version__); do
                          DOCKER_TAG="${string//\"}"
                   done
                   echo "Version for Docker tag is ${DOCKER_TAG}"
            - run:
                name: Generate Builder (not base)
                command: |
                    echo "PWD is ${PWD}"
                    cd expfactory/templates/build/docker/builder
                    docker build --no-cache -t vanessa/expfactory-builder .

  # This workflow will deploy images on merge to master only
  docker_with_lifecycle:
    jobs:
      - docker-publish/publish:
          image: vanessa/expfactory-builder
          dockerfile: expfactory/templates/build/docker/builder-base/Dockerfile
          tag: base
          filters:
            branches:
             only: master
          after_build:
            - run:
                name: Publish Docker Tag with Expfactory Version
                command: |
                   for string in $(cat expfactory/version.py | grep __version__); do
                          DOCKER_TAG="${string//\"}"
                   done
                   echo "Version for Docker tag is ${DOCKER_TAG}"
                   docker tag vanessa/expfactory-builder:base vanessa/expfactory-builder:base-v${DOCKER_TAG}
            - run:
                name: Generate Builder (not base)
                command: |
                    echo "PWD is ${PWD}"
                    ls
                    cd expfactory/templates/build/docker/builder
                    docker build --no-cache -t vanessa/expfactory-builder .
                    docker tag vanessa/expfactory-builder vanessa/expfactory-builder:${DOCKER_TAG}


install: &install
  name: install expfactory
  command: |
     cd /tmp/src
     $HOME/conda/bin/pip uninstall expfactory --yes || echo "Not installed"
     $HOME/conda/bin/pip install .[all]

load_docker_cache: &load_docker_cache
  name: Load Docker Cache
  command: |
     docker info
     set +o pipefail
     if [ -f /tmp/cache/container.tar.gz ]; then
       pigz -d --stdout /tmp/cache/container.tar.gz | docker load
     fi
     docker images

docker_save: &docker_save
  name: Docker save
  command: |
    echo "Saving ${CONTAINER_NAME} to container.tar.gz"
    mkdir -p /tmp/cache
    docker save ${CONTAINER_NAME}:latest \
    | pigz -2 -p 3 > /tmp/cache/container.tar.gz


build_docker_image: &build_docker_image
  name: Build Docker Images
  command: |
        echo $PWD
        echo " Testing container: ${CONTAINER_NAME}"
        ls
        cd expfactory/templates/build/docker/builder-ci && 
        echo "Building CI builder in /tmp/builder for testing current PR..."
        mkdir -p /tmp/builder
        cp ../builder-dev/entrypoint.sh /tmp/builder/entrypoint.sh
        cp Dockerfile /tmp/builder
        cp build.sh /tmp/builder && chmod u+x /tmp/builder/build.sh
        cp -R /root/repo /tmp/builder/expfactory && cd /tmp/builder && ls
        echo "Working directory is ${PWD}"
        # Build docker image
        e=1 && for i in {1..5}; do
          EXPFACTORY_BRANCH=$CIRCLE_BRANCH docker build \
            --cache-from=${CONTAINER_NAME} \
            --rm=false \
            -t ${CONTAINER_NAME}:latest . \
          && e=0 && break || sleep 15
        done && [ "$e" -eq "0" ]

install_deps: &install_deps
  name: Install dependencies
  command: |
      apk update && apk add --no-cache pigz


install_python_3: &install_python_3
  name: install Python 3.5 dependencies
  command: | 
      echo "Testing builder in $PWD" && ls
      cd $HOME
      if [ ! -d "/root/conda" ]; then
          wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh
          /bin/bash Miniconda3-latest-Linux-x86_64.sh -b -p $HOME/conda
          export PATH=$HOME/conda/bin:$PATH
          $HOME/miniconda3/bin/python -m pip install requests
       else
           echo "Miniconda 3 is already installed, continuing to build."
       fi

install_python_2: &install_python_2
  name: install Python 3.5 dependencies
  command: | 
      ls $HOME
      echo "Testing builder in $PWD" && ls
      cd $HOME
      if [ ! -d "/root/conda" ]; then
          wget https://repo.anaconda.com/miniconda/Miniconda2-latest-Linux-x86_64.sh
          /bin/bash Miniconda2-latest-Linux-x86_64.sh -b -p $HOME/conda
          export PATH=$HOME/conda/bin:$PATH
       else
           echo "Miniconda 2 is already installed, continuing to build."
       fi

test_builder: &test_builder
  name: Test Expfactory Builder
  command: |
    python --version
    /bin/sh /tmp/src/expfactory/testing/test_builder.sh

test_expfactory: &test_expfactory
  name: Test Expfactory
  command: |
    cd /tmp/src/expfactory
    $HOME/conda/bin/python -m unittest testing.test_experiment
    $HOME/conda/bin/python -m unittest testing.test_client 

jobs:
  test-python-3:
    docker:
      - image: docker:18.01.0-ce-git
    working_directory: ~/repo
    environment:
      - TEST_RUN_FOLDER: /tmp
      - CONTAINER_NAME: vanessa/expfactory-builder-ci
    steps:
      - restore_cache:
          keys:
            - docker-v1-{{ .Branch }}-{{ epoch }}
            - docker-v1-{{ .Branch }}-
            - docker-v1-master-
            - docker-v1-
          paths:
            - /tmp/cache/container.tar.gz
      - checkout
      - setup_remote_docker
      - run: *install_deps
      - run: *load_docker_cache
      - run: *build_docker_image
      - run: *docker_save
      - save_cache:
         key: docker-v1-{{ .Branch }}-{{ epoch }}
         paths:
            - /tmp/cache/container.tar.gz
      - run: *install_python_3
      - run: *install
      - save_cache:
          paths:
            - /root/conda
          key: v1-dependencies
      - run: *test_builder
      - run: *test_expfactory
      - store_test_results:
          path: /root/out/tests

  test-python-2:
    docker:
      - image: docker:18.01.0-ce-git
    environment:
      - TEST_RUN_FOLDER: /tmp
      - CONTAINER_NAME: vanessa/expfactory-builder-ci
    working_directory: ~/repo
    steps:
      - restore_cache:
          keys:
            - docker-v1-{{ .Branch }}-{{ epoch }}
            - docker-v1-{{ .Branch }}-
            - docker-v1-master-
            - docker-v1-
          paths:
            - /tmp/cache/container.tar.gz
      - checkout
      - setup_remote_docker
      - run: *install_deps
      - run: *load_docker_cache
      - run: *build_docker_image
      - run: *docker_save
      - save_cache:
         key: docker-v1-{{ .Branch }}-{{ epoch }}
         paths:
            - /tmp/cache/container.tar.gz
      - run: *install_python_2
      - run: *install
      - save_cache:
          paths:
            - /root/conda
          key: v1-dependencies        
      - run: *test_builder
      - run: *test_expfactory
      - store_test_results:
          path: /root/out/tests
